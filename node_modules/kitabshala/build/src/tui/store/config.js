"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createConfigStateSlice = exports.initialConfigState = void 0;
const config_1 = require("../../api/data/config");
const labels_1 = __importDefault(require("../../labels"));
const utils_1 = require("../../utils");
exports.initialConfigState = {
    latestVersion: "",
    mirrors: [],
    searchReqPattern: "",
    searchByMD5Pattern: "",
    MD5ReqPattern: "",
    mirror: "",
    columnFilterQueryParamKey: "",
    columnFilterQueryParamValues: {},
};
const createConfigStateSlice = (set, get) => (Object.assign(Object.assign({}, exports.initialConfigState), { fetchConfig: () => __awaiter(void 0, void 0, void 0, function* () {
        const store = get();
        store.setIsLoading(true);
        store.setLoaderMessage(labels_1.default.FETCHING_CONFIG);
        const config = yield (0, utils_1.attempt)(config_1.fetchConfig);
        if (!config) {
            store.setIsLoading(false);
            store.setErrorMessage("Couldn't fetch the config");
            return;
        }
        // Find an available mirror
        store.setLoaderMessage(labels_1.default.FINDING_MIRROR);
        const mirror = yield (0, config_1.findMirror)(config.mirrors, (failedMirror) => {
            store.setLoaderMessage(`${labels_1.default.COULDNT_REACH_TO_MIRROR}, ${failedMirror}. ${labels_1.default.FINDING_MIRROR}`);
        });
        store.setIsLoading(false);
        if (!mirror) {
            store.setErrorMessage("Couldn't find a working mirror");
            return;
        }
        set(Object.assign(Object.assign({}, config), { mirror }));
    }) }));
exports.createConfigStateSlice = createConfigStateSlice;
