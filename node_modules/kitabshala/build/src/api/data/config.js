"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.findMirror = exports.fetchConfig = void 0;
const node_fetch_1 = __importDefault(require("node-fetch"));
const settings_1 = require("../../settings");
function fetchConfig() {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            const response = yield (0, node_fetch_1.default)(settings_1.CONFIGURATION_URL);
            const json = yield response.json();
            const conf = json;
            return {
                latestVersion: conf["latest_version"] || "",
                mirrors: conf["mirrors"] || [],
                searchReqPattern: conf["searchReqPattern"] || "",
                searchByMD5Pattern: conf["searchByMD5Pattern"] || "",
                MD5ReqPattern: conf["MD5ReqPattern"] || "",
                columnFilterQueryParamKey: conf["columnFilterQueryParamKey"] || "",
                columnFilterQueryParamValues: conf["columnFilterQueryParamValues"] || {},
            };
        }
        catch (e) {
            throw new Error("Error occured while fetching configuration.");
        }
    });
}
exports.fetchConfig = fetchConfig;
function findMirror(mirrors, onMirrorFail) {
    return __awaiter(this, void 0, void 0, function* () {
        for (let i = 0; i < mirrors.length; i++) {
            const mirror = mirrors[i];
            try {
                yield (0, node_fetch_1.default)(mirror);
                return mirror;
            }
            catch (e) {
                onMirrorFail(mirror);
            }
        }
        return null;
    });
}
exports.findMirror = findMirror;
